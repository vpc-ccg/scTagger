import random
import re
import gzip
import pickle

import tqdm

configfile: 'config.yaml'

srAdapt = 'CTACACGACGCTCTTCCGATCT'

for k in config.keys():
    if not k.startswith('override_'):
        continue
    keys = k[len('override_'):].split('_')
    top_dict = eval('config{}'.format(''.join(['["{}"]'.format(x) for x in keys[:-1]])))
    assert keys[-1] in top_dict
    top_dict[keys[-1]]=config[k]

outpath = config['outpath'].rstrip('/')
clrg_d = f'{outpath}/cellranger-out'
extr_d = f'{outpath}/extract-out'
fred_d = f'{outpath}/freddie-out'
simu_d = f'{outpath}/simulation'
eval_d = f'{outpath}/evaluation'

for s in config['sim_samples']:
    assert s in config['samples']

lr_sim_cyc = 3
lr_sim_eff = 0.75
lr_sim_err = 0.000001
minnow_cyc = 4
minnow_err = 0.000001

rule all:
    input:
        'extern/minnow/build/src/minnow',
        'extern/3M-february-2018.txt',
        '{}/salmon_index'.format(simu_d),
        '{}/minnow_index'.format(simu_d),
        expand('{}/salmon_alevin/{{sample}}'.format(simu_d), sample = config['sim_samples']),
        expand('{}/minnow_estimate/{{sample}}'.format(simu_d), sample = config['sim_samples']),
        expand(
            '{}/minnow_simulate/{{sample}}/{{gcsSL}}/hg_100_S1_L001_R1_001.fastq.gz'.format(simu_d),
            sample = config['sim_samples'],
            gcsSL = config['gene_cell_seed_sr_lr'],
        ),
        expand(
            '{}/reads/{{sample}}/{{gcsSL}}/{{f}}'.format(simu_d),
            sample = config['sim_samples'],
            gcsSL = config['gene_cell_seed_sr_lr'],
            f = [
                'hg_100_S1_L001_R1_001.fastq.gz',
                'hg_100_S1_L001_R2_001.fastq.gz',
                'mols.tsv',
                'cbs.fa',
                'mbs.fa',
                'pcr.tsv',
                'lr.fq',
            ]
        ),
        expand(
            '{}/sim_{{sample}}_{{gcsSL}}.truth.tsv.gz'.format(eval_d),
            sample = config['sim_samples'],
            gcsSL = config['gene_cell_seed_sr_lr'],
        ),
    wildcard_constraints:
        sample = '|'.join([re.escape(s) for s in config['sim_samples']]+['^$'])

rule make_minnow:
    input:
        'extern/minnow'
    output:
        'extern/minnow/build/src/minnow'
    threads:
        4
    shell:
        'mkdir -p extern/minnow/build && '
        'cd extern/minnow/build && '
        'cmake -j {threads} -DCMAKE_C_COMPILER=`which gcc` .. && '
        'make -j {threads}'

rule wget_whitelist:
    output:
        'extern/3M-february-2018.txt'
    params:
        url = 'https://github.com/10XGenomics/cellranger/blob/5f5a6293bbc067e1965e50f0277286914b96c908/lib/python/cellranger/barcodes/3M-february-2018.txt.gz'
    shell:
        'wget {params.url} -O - | zcat > {output}'

rule chr_names:
    input:
        dna = config['salmon_refs']['genome'],
    output:
        '{}/salmon_index.chrnames.txt'.format(simu_d)
    shell:
        'grep ">" {input} | cut -d ">" -f 2 | cut -d " " -f 1 > {output}'

rule salmon_index:
    input:
        dna = config['salmon_refs']['genome'],
        cdna = config['salmon_refs']['transcriptome'],
        chr_names = '{}/salmon_index.chrnames.txt'.format(simu_d)
    output:
        directory('{}/salmon_index'.format(simu_d))
    conda:
        'envs/simulate.yml'
    threads:
        64
    resources:
        mem  = "512G",
        time = 60*6-1,
    shell:
        'salmon index '
        ' -t <(cat {input.cdna} {input.dna}) '
        ' -i {output} '
        ' -p {threads} '
        '  --gencode '
        ' -d {input.chr_names} '

rule tid_to_gid:
    input:
        config['salmon_refs']['annot']
    output:
        '{}/salmon_tx2gene.tsv'.format(simu_d)
    shell:
        'cat {input} '
        ' | awk -F "\\t" \'$3 == "transcript" {{print $9}}\''
        ' | tr -d ";\\"" ' 
        ' | awk \'{{for (i=1;i<=NF;i+=2) x[$i]=$(i+1); print x["transcript_id"]"\\t"x["gene_id"]}}\' > {output}'

rule salmon_alevin:
    input:
        r1 = lambda wildcards: config['samples'][wildcards.sample]['sr_reads']['R1'],
        r2 = lambda wildcards: config['samples'][wildcards.sample]['sr_reads']['R2'],
        tgMap = '{}/salmon_tx2gene.tsv'.format(simu_d),
        index = '{}/salmon_index'.format(simu_d),
    params:
        cc = lambda wildcards: config['samples'][wildcards.sample]['cell_count'],
    output:
        directory('{}/salmon_alevin/{{sample}}'.format(simu_d)),
    conda:
        'envs/simulate.yml'
    threads:
        64
    resources:
        mem  = "512G",
        time = 60*6-1,
    shell:
        'salmon alevin '
        ' -l ISR '
        ' -1 {input.r1} '
        ' -2 {input.r2} '
        ' -i {input.index} '
        ' --tgMap {input.tgMap} '
        ' -p {threads} '
        ' -o {output} '
        ' --chromiumV3 '
        ' --dumpFeatures '
        ' --expectCells {params.cc} '
        ' --dumpBfh '

rule minnow_index:
    input:
        cdna = config['salmon_refs']['transcriptome'],
        index = '{}/salmon_index'.format(simu_d),
    output:
        directory('{}/minnow_index'.format(simu_d))
    threads:
        64
    resources:
        mem  = "512G",
        time = 60*6-1,
    shell:
        'extern/minnow/build/src/minnow index'
        ' -r {input.cdna} '
        ' -k 101 '
        ' -f 20'
        ' -o {output} '
        ' --tmpdir {output}_temp '
        ' -p {threads} '

rule minnow_estimate:
    input:
        alevin_dir = '{}/salmon_alevin/{{sample}}'.format(simu_d),
        tgMap = '{}/salmon_tx2gene.tsv'.format(simu_d),
        cdna = config['salmon_refs']['transcriptome'],
    output:
        directory('{}/minnow_estimate/{{sample}}'.format(simu_d))
    threads:
        64
    resources:
        mem  = "512G",
        time = 60*6-1,
    shell:
        'extern/minnow/build/src/minnow estimate '
        ' --bfh {input.alevin_dir}/alevin/bfh.txt '
        ' -r {input.cdna} '
        ' --g2t {input.tgMap} '
        ' -o {output} '
        ' -p {threads} '

rule minnow_splatter:
    input:
        script = 'extern/minnow_splatter.R',
        tgMap = '{}/salmon_tx2gene.tsv'.format(simu_d),
    output:
        directory('{}/minnow_splatter/{{sample}}/{{gene_cnt}}-{{cell_cnt}}-{{seed}}-{{S}}-{{L}}'.format(simu_d)),
    conda:
        'envs/simulate.yml'
    shell:
        '{input.script} '
        ' {output} '
        ' {wildcards.gene_cnt} '
        ' {wildcards.cell_cnt}'
        ' {wildcards.seed} && '
        'cut -f2 {input.tgMap} '
        ' | sort -u '
        ' | shuf -n {wildcards.gene_cnt} --random-source=<(yes {wildcards.seed})'
        ' > {output}/quants_mat_rows.txt'

rule minnow_simulate:
    input:
        splatter = '{}/minnow_splatter/{{sample}}/{{gcsSL}}'.format(simu_d),
        tgMap = '{}/salmon_tx2gene.tsv'.format(simu_d),
        index = '{}/minnow_index'.format(simu_d),
        estimate = '{}/minnow_estimate/{{sample}}'.format(simu_d),
        whitelist = config['salmon_refs']['whitelist'],
    output:
        r1 = '{}/minnow_simulate/{{sample}}/{{gcsSL}}/hg_100_S1_L001_R1_001.fastq.gz'.format(simu_d),
        r2 = '{}/minnow_simulate/{{sample}}/{{gcsSL}}/hg_100_S1_L001_R2_001.fastq.gz'.format(simu_d),
    threads:
        64
    resources:
        mem  = "512G",
        time = 60*6-1,
    params:
        outpath = '{}/minnow_simulate/{{sample}}/{{gcsSL}}'.format(simu_d),
    shell:
        'extern/minnow/build/src/minnow simulate --splatter-mode '
        ' --inputdir {input.splatter} '
        ' -r {input.index}/ref_k101_fixed.fa '
        ' --g2t {input.tgMap} '
        f' --PCR {minnow_cyc:d} '
        f' -e {minnow_err:f} '
        ' -p {threads} '
        ' -o {params.outpath} '
        ' --dbg '
        ' --gfa {input.index}/dbg.gfa '
        ' -w {input.whitelist} '
        ' --countProb {input.estimate}/countProb.txt '
        ' --custom '
        ' --gencode' 

rule pickle_annot:
    input:
        gtf = config['salmon_refs']['annot'],
    output:
        pkl = f'{simu_d}/gtf.pkl'
    run:
        print('Reading GTF')
        tids = dict()
        for l in open(input.gtf):
            if l[0]=='#':
                continue
            l = l.rstrip().split('\t')
            if l[2]!='exon':
                continue
            info = l[8]
            info = [x.strip().split(' ') for x in info.strip(';').split(';')]
            info = {x[0]:x[1].strip('"') for x in info}
            contig = l[0]
            tid = info['transcript_id']
            if not tid in tids:
                tids[tid] = dict(contig=l[0], gene_id=info['gene_id'], exons=list(), strand=l[6])
            tids[tid]['exons'].append((
                int(l[3])-1,
                int(l[4]),
            ))
        pickle.dump(tids, open(output.pkl, 'wb+'))

rule count_reads:
    input:
        r1 = '{}/minnow_simulate/{{sample}}/{{gcsSL}}/hg_100_S1_L001_R1_001.fastq.gz'.format(simu_d),
    output:
        wc = '{}/minnow_simulate/{{sample}}/{{gcsSL}}/hg_100_S1_L001_R1_001.fastq.wc'.format(simu_d),
    shell:
        'zcat {input} | wc -l | awk \'{{print $1/4}}\' > {output}'

rule split_minnow_output:
    input:
        wc = '{}/minnow_simulate/{{sample}}/{{gcsSL}}/hg_100_S1_L001_R1_001.fastq.wc'.format(simu_d),
        r1 = '{}/minnow_simulate/{{sample}}/{{gcsSL}}/hg_100_S1_L001_R1_001.fastq.gz'.format(simu_d),
        r2 = '{}/minnow_simulate/{{sample}}/{{gcsSL}}/hg_100_S1_L001_R2_001.fastq.gz'.format(simu_d),
        pkl = f'{simu_d}/gtf.pkl'
    output:
        r1_fq    = '{}/reads/{{sample}}/{{gcsSL}}/hg_100_S1_L001_R1_001.fastq.gz'.format(simu_d),
        r2_fq    = '{}/reads/{{sample}}/{{gcsSL}}/hg_100_S1_L001_R2_001.fastq.gz'.format(simu_d),
        mols_tsv = '{}/reads/{{sample}}/{{gcsSL}}/mols.tsv'.format(simu_d),
        cbs_fa   = '{}/reads/{{sample}}/{{gcsSL}}/cbs.fa'.format(simu_d),
        mbs_fa   = '{}/reads/{{sample}}/{{gcsSL}}/mbs.fa'.format(simu_d),
    run:
        (
            gene_cnt,
            cell_cnt,
            seed,
            sr_cnt,
            lr_cnt,
        ) = [int(x) for x in wildcards.gcsSL.split('-')]
        # Estimating how many mols needed as input to LR PCR step to end up with to lr_cnt
        lr_cnt = lr_cnt//(1+lr_sim_eff)**lr_sim_cyc+1
        minnow_cnt = int(open(input.wc).read())
        print(f'Minnow sim count: {minnow_cnt:,}')
        if minnow_cnt < lr_cnt + sr_cnt:
            minnow_cnt = lr_cnt + sr_cnt
        P_l = lr_cnt/(minnow_cnt)
        P_s = sr_cnt/(minnow_cnt)
        print(f'SR count: {sr_cnt:,}')
        print(f'LR count: {lr_cnt:,}')
        print(f'SR probability: {P_s:.2%}')
        print(f'LR probability: {P_l:.2%}')

        print('Reading GTF pickle')
        tids = pickle.load(open(input.pkl, 'rb'))
        print('Reading simulated SRs')
        cbs = dict()
        mbs = dict()
        mols_tsv = open(output.mols_tsv, 'w+')
        cbs_fa = open(output.cbs_fa, 'w+')
        mbs_fa = open(output.mbs_fa, 'w+')
        r1_fq = gzip.open(output.r1_fq, 'wt+')
        r2_fq = gzip.open(output.r2_fq, 'wt+')

        print('Outputting a random sample of molecules')
        random.seed(seed)
        print(f'Seed: {seed}')
        mid = 0
        with gzip.open(input.r1, 'rt') as f1, gzip.open(input.r2, 'rt') as f2:
            for _ in  tqdm.tqdm(range(minnow_cnt*4)):
                l1 = f1.readline()
                l2 = f2.readline()
                if len(l1) == 0 or len(l2) == 0:
                    break
                if not l1.startswith('@'):
                    continue
                R = random.random()
                if R < P_l:
                    l1 = l1.split()[0].strip('@ \n').split(':')
                    assert len(l1[0]) == 26
                    cb = l1[0][:16]
                    mb = l1[0][16:]
                    if not cb in cbs:
                        cbs[cb] = len(cbs)
                        cbs_fa.write(f'>cb_{cbs[cb]}\n{cb}\n')
                    if not mb in mbs:
                        mbs[mb] = len(mbs)
                        mbs_fa.write(f'>mb_{mbs[mb]}\n{mb}\n')
                    tid = l1[1]
                    contig = tids[tid]['contig']
                    exons = tids[tid]['exons']
                    strand = tids[tid]['strand']
                    gene_id = tids[tid]['gene_id']

                    outlines = [f'{contig}\t{s}\t{e}\t{strand}\n' for s,e in exons] + [
                            f'polyA\t{0}\t{30}\t+\n',
                            f'mb_{mbs[mb]}\t{0}\t{10}\t-\n',
                            f'cb_{cbs[cb]}\t{0}\t{16}\t-\n',
                            f'srAdapt\t{0}\t{len(srAdapt)}\t-\n',
                    ]
                    mols_tsv.write(f'+{mid}\t{1}\t{len(outlines)}\t{gene_id}\n')
                    for l in outlines:
                        mols_tsv.write(l)
                    mid += 1
                elif P_l < R < P_l + P_s:
                    r1_fq.write(l1)
                    r2_fq.write(l2)
                    for _ in range(3):
                        l1 = f1.readline()
                        r1_fq.write(l1)
                        l2 = f2.readline()
                        r2_fq.write(l2)
                else:
                    continue
        cbs_fa.write(f'>srAdapt\n{srAdapt}\n')
        cbs_fa.write(f'>polyA\n{"A"*200}\n')
        mols_tsv.close()
        cbs_fa.close()
        mbs_fa.close()
        r1_fq.close()
        r2_fq.close() 

rule pcr:
    input:
        mols_tsv = '{}/reads/{{sample}}/{{g}}-{{c}}-{{seed}}-{{S}}-{{L}}/mols.tsv'.format(simu_d),
        cbs_fa   = '{}/reads/{{sample}}/{{g}}-{{c}}-{{seed}}-{{S}}-{{L}}/cbs.fa'.format(simu_d),
        mbs_fa   = '{}/reads/{{sample}}/{{g}}-{{c}}-{{seed}}-{{S}}-{{L}}/mbs.fa'.format(simu_d),
    output:
        pcr_tsv  = '{}/reads/{{sample}}/{{g}}-{{c}}-{{seed}}-{{S}}-{{L}}/pcr.tsv'.format(simu_d),
    shell:
        './extern/RNAInFuser/build/pcr'
        ' -m {input.mols_tsv}'
        ' -o {output.pcr_tsv}'
        ' --read-count {wildcards.L}'
        f' --cycles {lr_sim_cyc:d}'
        f' --efficiency {lr_sim_eff:f}'
        f' --error-rate {lr_sim_err:f}'
        ' --seed {wildcards.seed}'

rule sequence:
    input:
        pcr_tsv  = '{}/reads/{{sample}}/{{g}}-{{c}}-{{seed}}-{{S}}-{{L}}/pcr.tsv'.format(simu_d),
        cbs_fa   = '{}/reads/{{sample}}/{{g}}-{{c}}-{{seed}}-{{S}}-{{L}}/cbs.fa'.format(simu_d),
        mbs_fa   = '{}/reads/{{sample}}/{{g}}-{{c}}-{{seed}}-{{S}}-{{L}}/mbs.fa'.format(simu_d),
        dna_fa   = config['salmon_refs']['genome'],
    output:
        lr_fq  = '{}/reads/{{sample}}/{{g}}-{{c}}-{{seed}}-{{S}}-{{L}}/long-reads.fastq'.format(simu_d),
    threads:
        32
    conda:
        'envs/badread.yml'
    params:
        badread  = 'extern/Badread/badread-runner.py',
        tmp  = '{}/reads/{{sample}}/{{g}}-{{c}}-{{seed}}-{{S}}-{{L}}/long-reads_temp'.format(simu_d),
    shell:
        'rm -rf {params.tmp} && '
        'mkdir -p {params.tmp} && '
        './extern/RNAInFuser/build/sequencer '
        ' -m {input.pcr_tsv}'
        ' -r {input.cbs_fa},{input.mbs_fa},{input.dna_fa}'
        ' -o {output.lr_fq}'
        ' --badread {params.badread}'
        ' -t {threads}'
        ' --temp {params.tmp}'
        ' --seed {wildcards.seed}'
        ' --keep-temp'
        # ' && rm -r {params.tmp}'
rule rename_reads:
    input:
        lr_fq   = '{}/reads/{{sample}}/{{g}}-{{c}}-{{seed}}-{{S}}-{{L}}/long-reads.fastq'.format(simu_d),
    output:
        lr_fq   = '{}/reads/{{sample}}/{{g}}-{{c}}-{{seed}}-{{S}}-{{L}}/lr.fq'.format(simu_d),
    run:
        outfile = open(output.lr_fq, 'w+')
        rid=0
        for l in open(input.lr_fq):
            if l[0]!='@':
                outfile.write(l)
                continue
            l = l.rstrip('\n').split()
            outfile.write(f'@{rid} {" ".join(l[1:])}\n')
            rid += 1

rule convert_truth:
    input:
        pcr_tsv = '{}/reads/{{sample}}/{{g}}-{{c}}-{{seed}}-{{S}}-{{L}}/pcr.tsv'.format(simu_d),
        cbs_fa  = '{}/reads/{{sample}}/{{g}}-{{c}}-{{seed}}-{{S}}-{{L}}/cbs.fa'.format(simu_d),
        lr_fq   = '{}/reads/{{sample}}/{{g}}-{{c}}-{{seed}}-{{S}}-{{L}}/lr.fq'.format(simu_d),
    output:
        tsv = protected('{}/sim_{{sample}}_{{g}}-{{c}}-{{seed}}-{{S}}-{{L}}.truth.tsv.gz'.format(eval_d)),
    run:
        mol_to_rname = dict()
        rnames = set()
        for l in open(input.lr_fq):
            if l[0]!='@':
                continue
            l = l.rstrip('\n').split()
            rname = l[0][1:]
            assert not rname in rnames
            rnames.add(rname) 
            mol = l[1].split(',')[0]
            assert not mol in mol_to_rname
            mol_to_rname[mol] = rname
        print('mol_to_rname',len(mol_to_rname))
        print('rnames',len(rnames))
        bcid_to_bc = dict()
        for l in open(input.cbs_fa):
            l = l.rstrip('\n')
            if l[0] == '>':
                bcid = l[1:]
            else:
                bcid_to_bc[bcid] = l
        print('bcid_to_bc',len(bcid_to_bc))
        outfile = gzip.open(output.tsv, 'wt+')
        print_f = False
        for l in open(input.pcr_tsv):
            l = l.rstrip('\n').split('\t')[0]
            if l[0]=='+':
                mol = l[1:]
                print_f = True
            elif l.startswith('cb_') and print_f:
                print_f = False
                bcid = l
                outfile.write(f'{mol_to_rname[mol]}\t{bcid_to_bc[bcid]}\n')
        outfile.close()